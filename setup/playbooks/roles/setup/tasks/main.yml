---
- debug: var=wsgi_user
- debug: var=git_clone
- debug: var=git_version

- name: Deploy from git
  when: git_clone
  block:

    - name: Create user
      user:
        name: "{{ wsgi_user }}"
        comment: User for wsgi {{ git_name }}

    - name: Clone git repo on user home
      become: true
      become_user: "{{ wsgi_user }}"
      git:
        repo: "{{ git_repo }}"
        dest: /home/{{ wsgi_user }}/{{ git_name }}
        version: "{{ git_version }}"
        force: yes

- name: Ensure permissions for tests keys
  file:
    path: "{{ item }}"
    mode: 0600
  with_fileglob:
    - "/home/{{ wsgi_user }}/{{ git_name }}/tests/data/agent/key*"

- name: Manage ssh key
  become: true
  become_user: "{{ wsgi_user }}"
  vars:
    ssh_private_key_file: "/home/{{ wsgi_user }}/.ssh/ansible-ws"
    ssh_public_key_file: "{{ ssh_private_key_file }}.pub"
  block:

    - name: Create default ssh key
      shell: echo "y" | ssh-keygen -f {{ ssh_private_key_file }} -C ansible-ws -P "ansible-ws"

    - name: Add key in authorized_key
      authorized_key:
        user: "{{ wsgi_user }}"
        state: present
        key: "{{ lookup('file', ssh_public_key_file) }}"

    - name: Update known_hosts
      shell: ssh-keyscan -t ecdsa-sha2-nistp256 {{ ansible_default_ipv4.address }} > /home/{{ wsgi_user }}/.ssh/known_hosts

- name: Configure
  become: true
  become_user: root
  block:

    - name: Ensure runs dir exist
      file:
        path: "{{ runs_dir }}"
        state: directory
        owner: "{{ wsgi_user }}"
        group: "{{ wsgi_user }}"

    - name: Ensure grapher_dir exist
      file:
        path: "{{ grapher_dir }}"
        state: directory
        owner: "{{ wsgi_user }}"
        group: "{{ wsgi_user }}"

    - name: Install dependencies
      dnf:
        name:
          - httpd
          - python3-mod_wsgi
          - libselinux-python
          - policycoreutils-python-utils
          - python3-psutil
          - python3-pexpect
        state: latest

    - name: Update permission to allow apache reach wsgi
      file:
        path: /home/{{ wsgi_user }}
        state: directory
        mode: 0755

    - name: Create configuration folders
      file:
        path: /etc/{{ git_name }}
        state: directory

    - name: Create general configuration file
      template:
        src: "{{ item }}"
#         src: "{{ lookup('first_found', findme) }}"
        dest: /etc/{{ git_name }}/{{ git_name }}.yml
      with_first_found:
          - "{{ git_name }}_{{ ansible_distribution|lower }}_{{ ansible_distribution_major_version }}.yml"
          - "{{ git_name }}_{{ ansible_distribution|lower }}.yml"
          - "{{ git_name }}.yml"
#       vars:
#         findme:
#           - "{{ git_name }}_{{ ansible_distribution|lower }}_{{ ansible_distribution_major_version }}.yml"
#           - "{{ git_name }}_{{ ansible_distribution|lower }}.yml"
#           - "{{ git_name }}.yml"

    - name: Create services configuration files
      template:
        src: services/{{ service.name }}.yml
        dest: /etc/{{ git_name }}/{{ service.name }}.yml
      loop: "{{ wsgi_services }}"
      loop_control:
        loop_var: service
      vars:
        url: "{{ wsgi_base_url + '/' + service.alias }}"

    - name: Get selinux state
      command: getenforce
      register: getenforce

    - name: Manage selinux
      when: getenforce.stdout == "Enforcing"
      block:

        - name: Set selinux boolean to use home
          command: setsebool -P {{ item }} on
          loop:
            - httpd_enable_homedirs
            - httpd_read_user_content

        - name: Create empty log file
          file:
            path: "{{ wsgi_logfile }}"
            state: touch
            owner: "{{ wsgi_user }}"
            group: "{{ wsgi_user }}"

        - name: Set context for files
          sefcontext:
            target: "{{ item }}"
            setype: httpd_sys_rw_content_t
            state: present
          loop: "{{ selinux.files }}"

        - name: Apply new SELinux file context to log file
          command: restorecon -iv {{ wsgi_logfile }}

    - name: Deploy apache configuration
      template:
        src: httpd.conf
        dest: /etc/httpd/conf.d/{{ git_name }}.conf

#     - name: Manage firewalld
#       firewalld:
#         port: "{{ wsgi_port }}/tcp"
#         permanent: yes
#         state: enabled
#         immediate: yes

    - name: Reload apache config
      systemd:
        name: httpd
        state: reloaded
        enabled: yes

    - name: Display wsgi service
      debug: msg="{{ wsgi_base_url }}/{{ service. alias }}"
      loop: "{{ wsgi_services }}"
      loop_control:
        loop_var: service
...
