---
- debug: var=wsgi_user
- debug: var=git_clone
- debug: var=git_version
- debug: var=os_version
- debug: var=required.os

- name: Ensure pre-requiste
  assert:
    that:
      - os_version in required.os

- name: Deploy from git
  when: git_clone|bool
  block:
    - name: Create user
      user:
        name: "{{ wsgi_user }}"
        comment: User for wsgi {{ git_name }}
        shell: /bin/bash

    - name: Clone git repo on user home
      become: true
      become_user: "{{ wsgi_user }}"
      git:
        repo: "{{ git_repo }}"
        dest: /home/{{ wsgi_user }}/{{ git_name }}
        version: "{{ git_version }}"
        force: yes

- name: Ensure permissions for tests keys
  file:
    path: "{{ item }}"
    mode: 0600
  with_fileglob:
    - "/home/{{ wsgi_user }}/{{ git_name }}/tests/data/agent/key*"

- name: Manage ssh key
  become: true
  become_user: "{{ wsgi_user }}"
  vars:
    ssh_private_key_file: "/home/{{ wsgi_user }}/.ssh/ansible-ws"
    ssh_public_key_file: "{{ ssh_private_key_file }}.pub"
  when: ssh_private_key_file is not file
  block:
    - name: Create default ssh key
      shell: echo "y" | ssh-keygen -f {{ ssh_private_key_file }} -C ansible-ws -P "ansible-ws"

    - name: Add key in authorized_key
      authorized_key:
        user: "{{ wsgi_user }}"
        state: present
        key: "{{ lookup('file', ssh_public_key_file) }}"

    - name: Update known_hosts
      shell: ssh-keyscan -t ecdsa-sha2-nistp256 {{ ansible_default_ipv4.address }} > /home/{{ wsgi_user }}/.ssh/known_hosts

- name: Configure
  become: true
  become_user: root
  block:
    - name: Ensure working folders exist
      file:
        path: "{{ item.value }}"
        state: directory
        owner: "{{ wsgi_user }}"
        group: "{{ wsgi_user }}"
      loop: "{{ working_dirs|dict2items }}"

    - name: Update permission to allow apache reach wsgi
      file:
        path: /home/{{ wsgi_user }}
        state: directory
        mode: 0755

    - name: Create configuration folders
      file:
        path: /etc/{{ git_name }}
        state: directory

    - name: Deploy logging configuration
      template:
        src: logging.conf
        dest: /etc/{{ git_name }}/logging.conf

    - name: Create general configuration file
      template:
        src: "{{ git_name }}.yml"
        dest: /etc/{{ git_name }}/{{ git_name }}.yml

- name: selinux configuration
  when:
    - ansible_selinux_python_present
    - ansible_selinux.status == "enabled"
    - ansible_selinux.mode == "enforcing"
  become: true
  become_user: root
  block:
    - name: (selinux) Change the httpd_t domain to permissive
      selinux_permissive:
        name: httpd_t
        permissive: true

# - include_tasks: selinux_cleanup.yml
#   tags:
#     - selinux_cleanup

- include_tasks: "{{ ansible_distribution|lower }}.yml"

- name: Display wsgi service
  debug: msg="{{ wsgi_base_url }}/{{ service. alias }}"
  loop: "{{ wsgi_services }}"
  loop_control:
    loop_var: service

- include_tasks: tests.yml
  when: wsgi_tests|bool
  tags:
    - tests
...